# Generated by Django 3.2.16 on 2022-10-24 13:39

import math

from django.db import migrations, transaction, connection
from rich.progress import Progress

BATCH_SIZE = 100000


def migrate_change_add(apps, schema_editor):
    change_add = apps.get_model('serverdb', 'ChangeAdd')
    total = change_add.objects.count()
    batches = math.ceil(total / BATCH_SIZE)

    with Progress() as progress:
        migration = progress.add_task("\t[green]Migrating ChangeAdd data...", total=batches)

        with connection.cursor() as cursor:
            while not progress.finished:
                with transaction.atomic():
                    cursor.execute("""
                        WITH moved AS (
                            DELETE FROM serverdb_changeadd
                            WHERE id IN (SELECT id FROM serverdb_changeadd ORDER BY id DESC LIMIT %s FOR UPDATE)
                            RETURNING 
                                server_id as object_id,
                                'create' as change_type,
                                attributes_json::jsonb as change_json,
                                commit_id
                        )
                        INSERT INTO serverdb_change (object_id, change_type, change_json, commit_id) 
                        SELECT * FROM moved;
                    """, [BATCH_SIZE])

                progress.update(migration, advance=1)


def migrate_change_delete(apps, schema_editor):
    change_delete = apps.get_model('serverdb', 'ChangeDelete')
    total = change_delete.objects.count()
    batches = math.ceil(total / BATCH_SIZE)

    with Progress() as progress:
        migration = progress.add_task("\t[green]Migrating ChangeDelete data...", total=batches)

        with connection.cursor() as cursor:
            while not progress.finished:
                with transaction.atomic():
                    cursor.execute("""
                        WITH moved AS (
                            DELETE FROM serverdb_changedelete
                            WHERE id IN (SELECT id FROM serverdb_changedelete ORDER BY id DESC LIMIT %s FOR UPDATE)
                            RETURNING 
                                server_id as object_id,
                                'delete' as change_type,
                                attributes_json::jsonb as change_json,
                                commit_id
                        )
                        INSERT INTO serverdb_change (object_id, change_type, change_json, commit_id)
                        SELECT * FROM moved;
                    """, [BATCH_SIZE])

                progress.update(migration, advance=1)


def migrate_change_update(apps, schema_editor):
    change_update = apps.get_model('serverdb', 'ChangeUpdate')
    total = change_update.objects.count()
    batches = math.ceil(total / BATCH_SIZE)

    with Progress() as progress:
        migration = progress.add_task("\t[green]Migrating ChangeUpdate data...", total=batches)

        with connection.cursor() as cursor:
            while not progress.finished:
                with transaction.atomic():
                    cursor.execute("""
                        WITH moved AS (
                            DELETE FROM serverdb_changeupdate
                            WHERE id IN (SELECT id FROM serverdb_changeupdate ORDER BY id DESC LIMIT %s FOR UPDATE)
                            RETURNING 
                                server_id as object_id,
                                'change' as change_type,
                                updates_json::jsonb as change_json,
                                commit_id
                        )
                        INSERT INTO serverdb_change (object_id, change_type, change_json, commit_id)
                        SELECT * FROM moved;
                    """, [BATCH_SIZE])

                progress.update(migration, advance=1)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('serverdb', '0011_create_change_table'),
    ]

    # The migration of the old table is in a dedicated migration to avoid
    # running them together with the DDL statements which cause a full table
    # lock.
    #
    # This migration can safely be aborted by pressing <CTRL>-<C> at any time.
    # It can be continued any time by starting it again.
    operations = [
        migrations.RunPython(migrate_change_add),
        migrations.RunPython(migrate_change_delete),
        migrations.RunPython(migrate_change_update),
    ]
